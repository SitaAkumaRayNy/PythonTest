# 1. Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

print("Задание 1")
list1 = [2, 'text', 45.3, None]
for el in list1:
    print(type(el))

# 2. Для списка реализовать обмен значений соседних элементов, т.е.
# Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
# При нечетном количестве элементов последний сохранить на своем месте.
# Для заполнения списка элементов необходимо использовать функцию input().

print("Задание 2")
list2 = input("Введите значения через запятую: ").split(",")
print("Введенный список: ", list2)
ind = 0
while ind < len(list2):
    if ind == len(list2) - 1:
        if len(list2) % 2 == 1:
            break
    else:
        list2[ind], list2[ind + 1] = list2[ind + 1], list2[ind]
        ind += 2
print("Измененный список:", list2)

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и через dict.

print("Задание 3")
month = int(input("Введите месяц в виде целого числа: "))

seasons_list = ["Зима", "Зима", "Весна", "Весна", "Весна", "Лето", "Лето", "Лето", "Осень", "Осень", "Осень", "Зима"]
print("Ваше время года (list): ", seasons_list[month - 1])

season_dict = {"Зима":[12,1,2], "Весна":[3,4,5], "Лето":[6,7,8], "Осень":[9,10,11]}
for key, val in season_dict.items():
    if month in val:
        print("Ваше время года (dict)", key)

#4. Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки. Строки необходимо пронумеровать.
# Если в слово длинное, выводить только первые 10 букв в слове.

print("Задание 4")
list3 = input("Введите значения через пробел: ").split(" ")

for el in list3:
    print(el[:10])

#5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с
# тем же значением должен разместиться после них.

print("Задание 5")
list4 = [7, 5, 3, 3, 2]

print("Текущий рейтинг", list4)
r = int(input("Введите натуральное число: "))

list4.append(r)
list4.sort(reverse = True)
print("Обновленный рейтинг: ", list4)

# 6. *Реализовать структуру данных «Товары». Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента —
# номер товара и словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.

print("Задание 6")
goods_list = []
count = int(input("Введите количество товаров: "))

ind = 0
while ind < count:
    temp_list = input("Введите название, цену, количество и единицу измерения через запятую: ").split(",")
    goods_tuple = (ind + 1, {"Название" : temp_list[0], "Цена" : temp_list[1], "Количество" : temp_list[2], "Ед" : temp_list[3]})
    goods_list.append(goods_tuple)
    ind += 1

print(goods_list)

anal_dict = {"Название" : [], "Цена" : [], "Количество" : [], "Ед" : []}
for ind, el in goods_list:
    anal_dict["Название"].append(el["Название"])
    anal_dict["Цена"].append(el["Цена"])
    anal_dict["Количество"].append(el["Количество"])
    if el["Ед"] not in anal_dict["Ед"]:
        anal_dict["Ед"].append(el["Ед"])

print(anal_dict)






