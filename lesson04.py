# 1. Реализовать скрипт, в котором должна быть предусмотрена
# функция расчета заработной платы сотрудника. В расчете
# необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
# Для выполнения расчета для конкретных значений
# необходимо запускать скрипт с параметрами.

from sys import argv
if len(argv)>1:
    script_name, hours, stavka, bonus = argv
    print ("Заработанная плата: ", float(hours) * float(stavka) + float(bonus))
else:
    print("Подай параметры на вход")

# 2. Представлен список чисел. Необходимо вывести элементы
# исходного списка, значения которых больше предыдущего элемента.
# Для формирования списка использовать генератор.

list1 = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
list2 = [el for i, el in enumerate(list1[1:]) if el > list1[i]]
print("Исходный список: ", list1)
print("Новый список: ", list2)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

list3 = [el for el in range(20,240) if not(el % 20) or not(el % 21)]
print("Задание 3: ", list3)

# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.

list4 =  [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
list5 = [el for el in list4 if list4.count(el) == 1]
print("Исходный список: ", list4)
print("Новый список: ", list5)

#5. Реализовать формирование списка, используя функцию range()
# и возможности генератора. В список должны войти четные числа
# от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce
list6 = [el for el in range(100,1001) if not(el % 2)]

def my_func(prev_el, el):
    return prev_el * el

print("Исходный список: ", list6)
print("Произведение чисел: ", reduce(my_func, list6))

# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
#
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.

from itertools import count

x = int(input("Введите начальное значение: "))
list7 = []

# придумаем ограничение: елемент не должен быть больше 100
for el in count(x):
    if el > 100:
        break
    print(el)
    list7.append(el)

from itertools import cycle

# придумаем ограничение: количество элементов в генери руемом списке не должно быть
# больше длины исходного списка * 2
ind = 0
for el in cycle(list7):
    if ind > len(list7) * 2:
        break
    print(el)
    ind += 1

# 7. Реализовать генератор с помощью функции с ключевым словом yield,
# создающим очередное значение. При вызове функции должен создаваться
# объект-генератор. Функция должна вызываться следующим образом:
# for el in fact(n). Функция отвечает за получение факториала числа,
# а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.

import math

def factorial(n):
    i = 1
    while i <= n:
        yield math.factorial(i)
        i += 1

N = int(input("Введите N: "))
fact = factorial(N)

for el in fact:
    print(el)